<?php
/*1. Функции для работы с массивами 
*1) array_combine осуществляет слияние двух массивов в один ассоциативный
array_combine(массив ключей, массив значений);
array_unique осуществляет удаление повторяющихся элементов (дублей) из массива. 
array_unique(массив);

2) array_count_values производит подсчет количества всех значений массива.
array_count_values(массив);
count подсчитывает количество элементов массива.
count(массив);

3) array_diff_key возвращает массив из элементов, которые не являются общими для всех массивов, переданных в функцию.
array_diff(массив, массив, массив...);
n_array проверяет наличие заданного элемента в массиве. 
in_[что искать, в каком массиве];

4) array_intersect_key вычисляет пересечение массивов - возвращает массив из элементов, которые есть во всех массивах, переданных в функцию. 
array_intersect(массив, массив, массив...);
range создает массив с диапазоном элементов.
range(откуда, докуда, [шаг]);

5) array_key_exists проверяет присутствие указанного ключа в массиве.
array_key_exists(ключ который нужно проверить, массив в котором проверять); 
compact сливает содержимое переменных в ассоциативный массив, где ключами будут названия этих переменных. 
compact(имена переменных);

6) array_intersect, array_merge 
7) array_multisort 
8) array_pop, array_push 
9) array_rand, shuffle 

10) array_replace заменяет значения первого массива значениями с такими же ключами из других переданных массивов
array_replace(массив, массив, массив...);
array_chunk разбивает одномерный массив в двухмерный
array_chunk(массив, по сколько элементов);

11) array_reverse переворачивает массив в обратном порядке.
array_reverse(массив, [сохранять ли ключи]);
array_search осуществляет поиск значения в массиве и возвращает ключ первого найденного элемента.
array_search(что ищем, где ищем, [сравнивать по типу = false]);

12) array_shift вырезает и возвращает первый элемент массива. При этом этот элемент исчезает из массива. 
array_shift(массив);
array_unshift добавляет элементы в начало массива. 
array_unshift(массив, какие элементы добавить);

13) array_slice отрезает и возвращает часть массива. При этом сам массив не меняется.
array_slice(массив, откуда отрезать, [сколько], [сохранять ключи = false]);
array_splice отрезает и возвращает часть массива. При этом отрезанная часть исчезает из массива.
array_splice(массив, откуда отрезать, [сколько], [вставить взамен]);

2. Дан массив [3, 1, 6, 0, 4, 5]. 
С помощью цикла foreach найдите сумму квадратов элементов этого массива. 
Результат вывести на экран; 
*/

$arr = [3, 1, 6, 0, 4, 5];
foreach($arr as $elem) {
	$sum = ($elem*2);
	$result = $result + $sum;
	
} echo $result."<br>";

/*
3. Вывести таблицу умножения чисел до 10 с помощью двух циклов for (вложенный цикл); 
*/

for ($i = 1; $i <=10; $i++) {
		echo "<br>";
	for ($j = 1; $j <=10; $j++) {
		echo "<div style='float:left; width: 30px;'>". $j * $i."</div>";
	
	}

}
echo "<br>"."<hr> ";

/*
4. Нарисуйте треугольник из символов *. Высота треугольника равна 15. 
*/

	$star = '';
	for ($i = 1; $i <= 15; $i++) {
		$star .= 'x';
		echo $star.'<br>';
	}

/*
5. Создать массив из дней недели. С помощью цикла foreach выведите все дни недели, <br> 
а текущий день выведите жирным. Текущий день можно получить с помощью функции date. Название дней выводить по-русски 
*/
echo "<br>"."<hr> ";

$arr2 = ['пн'=>'Monday', 'вт'=>'Tuesday', 'ср'=>'Wednesday', 'чт'=>'Thursday', 'пт'=>'Friday', 'сб'=> 'Saturday', 'вс'=>'Sunday'];
$day = date("l");
echo "</br>";
foreach ($arr2 as $key=>$elem) {
	if ($elem == $day) {
	echo "<br><b>".$key."</b>";
	}else {
		echo "</br>".$key;
	
	  }

}

/*
6. Вывести все числа, меньше 30, у которых есть хотя бы одна цифра 3 и которые не делятся на 5. 
Посмотрите функцию strpos! 
*/

echo "<hr> ";

for ($i = 1; $i < 30; $i++) {
	
	if (strpos((string)$i, '3') and ($i % 5) !== 0){
		echo $i."<br>";
	} 
}


//7**. Отсортировать массив по 'price'

	
$arr4 = [
'1'=> ['price' => 10,'count' => 2],
'2'=> ['price' => 5,'count' => 5],
'3'=> ['price' => 8,'count' => 5],
'4'=> ['price' => 12,'count' => 4],
'5'=> ['price' => 8,'count' => 4],
];


foreach ($arr4 as $key=>$elem) {
	$data_price[$key]=$elem['price'];
}
array_multisort($data_price, SORT_NUMERIC, $arr4);
var_export($arr4);


?>